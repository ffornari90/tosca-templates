tosca_definitions_version: tosca_simple_yaml_1_0

imports:
  - indigo_custom_types: https://baltig.infn.it/infn-cloud/tosca-types/raw/master/custom_types.yaml

description: Run a single VM with all the ML-INFN envirnoment exposing both ssh access and Jupyter

metadata:
  display_name: Working Station for Machine Learning INFN (ML_INFN)
  icon: https://paas.cloud.infn.it/public/images/ml_infn.png
  allowed_groups: "beta-testers,developers,orchestrator-admin"

topology_template:

  inputs:

    num_cpus:
      type: integer
      description: "Number of VM vCPUs [int]"
      default: 2
    mem_size:
      type: string
      description: "VM Memory size [str]"
      default: "4 GB"
    jupyter_token:
      required: yes
      type: string
      description: "Token for Jupyter login [str]"
      
  node_templates:

    ml_infn_basic:
      type: tosca.nodes.DODAS.ml_infn
      properties:
        ml_user: "cloudadm"
        jupyter_port: 8888
        jupyter_token: { get_input: jupyter_token }
        ml_test_url: "http://cmsdoc.cern.ch/~spiga/test_InfnCloud_v0.2.tar.gz"
        cvmfs_repositories: 
          - cms-ib.cern.ch
          - cms.cern.ch
          - atlas-condb.cern.ch
          - atlas-nightlies.cern.ch
          - atlas-online-nightlies.cern.ch
          - atlas.cern.ch
          - alice.cern.ch
          - geant4.cern.ch
          - sft.cern.ch
          - lhcb.cern.ch
          #,ilc.desy.de]
      requirements:
        - host: ml_server
        - dependency: pip_manager_install


    pip_manager_install:
      type: tosca.nodes.DODAS.pip_manager
      properties:
        packages: 
          - keras
          - tensorflow
          - matplotlib 
          - scikit-learn
          - numpy
          - torch
          - uproot
          - jupyter
      requirements:
        - host: ml_server

    ml_server:
      type: tosca.nodes.indigo.Compute
      capabilities:
        endpoint:
          properties:
            network_name: PUBLIC
            ports:
              jupyter:
                protocol: tcp
                source: 8888
        scalable:
          properties:
            count: 1
        host:
          properties:
            num_cpus: { get_input: num_cpus }
            mem_size: { get_input: mem_size }
        os:
          properties:
            distribution: centos
            version: 7

  outputs:
    label:
      value: "ML-INFN working station"
    node_ip:
      value: { get_attribute: [ ml_server, public_address, 0 ] }
    node_creds:
      value: { get_attribute: [ ml_server, endpoint, credential, 0 ] }
    jupyter_endpoint:
      value: { concat: [ 'http://', get_attribute: [ ml_server, public_address, 0 ],":8888" ]}
