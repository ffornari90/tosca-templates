tosca_definitions_version: tosca_simple_yaml_1_0

imports:
  - indigo_custom_types: https://baltig.infn.it/infn-cloud/tosca-types/raw/v2.2.0/tosca_types/applications/jupyter_types.yaml

description: >
  Run a single VM with CYGNO Environment prepared exposing both ssh access and JupyterHub interface.
metadata:
  display_name: Working Station for CYGNO Experiment

topology_template:
  inputs:
    num_cpus:
      type: integer
      description: Number of virtual cpus for the VM
      default: 2
      constraints:
        - valid_values: [2, 4, 8, 16]

    mem_size:
      type: scalar-unit.size
      description: Amount of memory for the VM
      default: 4 GB
      constraints:
        - valid_values: [4 GB, 8 GB, 16 GB, 32 GB]

    users:
      type: list
      description: list of users to create on the VM
      entry_schema:
        type: tosca.datatypes.indigo.User
      default: []
      required: false

    iam_url:
      type: string
      default: "https://iam.cloud.infn.it"
      description: IAM Instance for end user authentication

    iam_subject:
      type: string
      default: ""
      description: IAM owner subject

    iam_groups:
      type: string
      default: "cygno-users"
      description: IAM groups for authorization management

    iam_admin_groups:
      type: string
      default: "cygno"
      description: IAM groups for JupyterHub ADMIN authorization management

    enable_monitoring:
      type: boolean
      default: false
      description: Enable/disable monitoring

    jupyter_images:
      type: string
      default: "dodasts/cygno-lab:v1.0.17-cygno"
      description: Default image for jupyter server

    ports:
      description: Ports to open on the VM
      type: map
      required: false
      default:
        {
          "traefik-web": { "protocol": "tcp", "source": 80 },
          "traefik-websecure": { "protocol": "tcp", "source": 443 },
          "jupyter": { "protocol": "tcp", "source": 8888 },
          "grafana": { "protocol": "tcp", "source": 3000 },
        }
      constraints:
        - min_length: 0
      entry_schema:
        type: tosca.datatypes.indigo.network.PortSpec

    mountpoint_docker:
      type: string
      default: /var/lib/docker/
      description: Path to mount the volume for docker

    mountpoint_data:
      type: string
      default: /data
      description: Path to mount the volume for data

    volume_size_docker:
      type: scalar-unit.size
      description: Size of the volume to be attached
      default: 100 GB

    volume_size_data:
      type: scalar-unit.size
      description: Size of the volume to be attached
      default: 200 GB

  node_templates:
    ml_install:
      type: tosca.nodes.DODAS.single-node-jupyterhub
      properties:
        iam_url: { get_input: iam_url }
        iam_subject: { get_input: iam_subject }
        iam_groups: { get_input: iam_groups }
        iam_admin_groups: { get_input: iam_admin_groups }
        monitoring: { get_input: enable_monitoring }
        jupyter_images: { get_input: jupyter_images }
        jupyter_post_start_cmd: "/usr/local/share/dodasts/script/post_script.sh"
        jupyter_host_mount_dir: { get_input: mountpoint_data } 
        dns_name: { concat: [get_attribute: [HOST, public_address, 0], ".myip.cloud.infn.it"] }
        letsencrypt_test: false
      requirements:
        - host: vm_server

    pub_network:
      type: tosca.nodes.network.Network
      properties:
        network_type: public

    server_pub_port:
      type: tosca.nodes.network.Port
      properties:
        order: 1
      requirements:
        - binding: vm_server
        - link: pub_network

    priv_network:
      type: tosca.nodes.network.Network
      properties:
        network_type: private

    server_priv_port:
      type: tosca.nodes.network.Port
      properties:
        order: 0
      requirements:
        - binding: vm_server
        - link: priv_network

    vm_server:
      type: tosca.nodes.indigo.Compute
      properties:
        os_users: { get_input: users }
      capabilities:
        endpoint:
          properties:
            ports: { get_input: ports }
        scalable:
          properties:
            count: 1
        host:
          properties:
            num_cpus: { get_input: num_cpus }
            mem_size: { get_input: mem_size }
        os:
          properties:
            distribution: ubuntu
            version: 20.04
      requirements:
        - local_storage:
            node: block_device_docker
            capability: tosca.capabilities.Attachment
            relationship:
              type: tosca.relationships.AttachesTo
              properties:
                location: { get_input: mountpoint_docker }
        - local_storage:
            node: block_device_data
            capability: tosca.capabilities.Attachment
            relationship:
              type: tosca.relationships.AttachesTo
              properties:
                location: { get_input: mountpoint_data }

    block_device_docker:
      type: tosca.nodes.BlockStorage
      properties:
        size: { get_input: volume_size_docker }

    block_device_data:
      type: tosca.nodes.BlockStorage
      properties:
        size: { get_input: volume_size_data }

  outputs:
    node_ip:
      value: { get_attribute: [vm_server, public_address, 0] }
    jupyter_endpoint:
      value: { concat: [ "https://", get_attribute: [vm_server, public_address, 0], ".myip.cloud.infn.it", ":8888" ], }
    grafana_endpoint:
      value: { concat: [ "https://", get_attribute: [vm_server, public_address, 0], ".myip.cloud.infn.it", ":3000" ] }
    os_users:
      value: { get_property: [vm_server, os_users, 0] }
