tosca_definitions_version: tosca_simple_yaml_1_0

imports:
  - indigo_custom_types: https://baltig.infn.it/infn-cloud/tosca-types/raw/v2.2.0/tosca_types/applications/jupyter_types.yaml

description: Run Jupyter on a single VM enabling Notebooks persistence

metadata:
  display_name: Jupyter with persistence for Notebooks

topology_template:
  inputs:
    num_cpus:
      type: integer
      description: Number of virtual cpus for the VM
      default: 2
      constraints:
        - valid_values: [2, 4, 8]

    mem_size:
      type: scalar-unit.size
      description: Amount of memory for the VM
      default: 4 GB
      constraints:
        - valid_values: [4 GB, 8 GB, 16 GB]

    os_distribution:
      type: string
      default: ubuntu
      description: Operating System distro
      constraints:
        - valid_values: ["ubuntu"]

    os_version:
      type: version
      default: 20.04
      description: Operating System distribution version
      constraints:
        - valid_values: [20.04]

    users:
      type: list
      description: list of users to create on the VM
      entry_schema:
        type: tosca.datatypes.indigo.User
      default: []
      required: false

    iam_url:
      type: string
      default: "https://iam.cloud.infn.it"
      description: IAM Instance for end user authentication

    iam_groups:
      type: string
      default: "end-users-catchall"
      description: IAM groups for authorization management

    iam_admin_groups:
      type: string
      default: "infn-cloud-catchall"
      description: IAM groups for JupyterHub ADMIN authorization management

    jupyter_images:
      type: string
      default: "dodasts/snj-base-lab-persistence:v1.0.0-snj"
      description: Default image

    jupyterlab_collaborative:
      type: boolean
      default: false
      description: enable the jupyter collaborative service

    jupyterlab_collaborative_image:
      type: string
      default: "dodasts/snj-base-jlabc:v1.0.0-snj"
      description: Default image for jupyter collaborative service

    ports:
      description: Ports to open on the VM
      type: map
      required: false
      default:
        {
          "jupyter": { "protocol": "tcp", "source": 8888 },
          "jupyter-collaborative": { "protocol": "tcp", "source": 8889 },
          "grafana": { "protocol": "tcp", "source": 3000 },
        }
      constraints:
        - min_length: 0
      entry_schema:
        type: tosca.datatypes.indigo.network.PortSpec

  node_templates:
    ml_install:
      type: tosca.nodes.DODAS.single-node-jupyterhub
      properties:
        iam_url: { get_input: iam_url }
        iam_groups: { get_input: iam_groups }
        iam_admin_groups: { get_input: iam_admin_groups }
        jupyter_images: { get_input: jupyter_images }
        jupyterlab_collaborative: { get_input: jupyterlab_collaborative }
        jupyter_post_start_cmd: "/usr/local/share/dodasts/script/post_script.sh"
        jupyterlab_collaborative_image:
          { get_input: jupyterlab_collaborative_image }
        server_ip: { get_attribute: [HOST, private_address, 0] }
      requirements:
        - host: vm_server

    priv_network:
      type: tosca.nodes.indigo.network.Network
      properties:
        network_type: private

    server_priv_port:
      type: tosca.nodes.network.Port
      properties:
        order: 0
      requirements:
        - binding: vm_server
        - link: priv_network

    vm_server:
      type: tosca.nodes.indigo.Compute
      properties:
        os_users: { get_input: users }
      capabilities:
        endpoint:
          properties:
            ports: { get_input: ports }
        scalable:
          properties:
            count: 1
        host:
          properties:
            num_cpus: { get_input: num_cpus }
            mem_size: { get_input: mem_size }
        os:
          properties:
            distribution: { get_input: os_distribution }
            version: { get_input: os_version }

  outputs:
    node_ip:
      value: { get_attribute: [vm_server, private_address, 0] }
    vpn_server:
      value: { get_property: [ priv_network, proxy_host ] }  
    jupyter_endpoint:
      value:
        {
          concat:
            [
              "https://",
              get_attribute: [vm_server, private_address, 0],
              ":8888",
            ],
        }
    grafana_endpoint:
      value:
        {
          concat:
            [
              "https://",
              get_attribute: [vm_server, private_address, 0],
              ":3000",
            ],
        }
    os_users:
      value: { get_property: [vm_server, os_users, 0] }
    vpn_client_conf_url:
      value: { concat: [ "https://baltig.infn.it/infn-cloud/vpnconfiles/-/raw/main/vpn-",  get_property: [ priv_network, proxy_host ], "-client.ovpn?inline=false" ] }      
