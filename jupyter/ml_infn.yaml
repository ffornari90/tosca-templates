tosca_definitions_version: tosca_simple_yaml_1_0

imports:
  - indigo_custom_types: https://baltig.infn.it/infn-cloud/tosca-types/raw/v2.5.3/tosca_types/applications/jupyter_types.yaml

description: Run a single VM with exposing both ssh access and multiuser JupyterHub interface, integrating the ML-INFN envirnoment

metadata:
  display_name: Computational enviroment for Machine Learning INFN (ML_INFN)

topology_template:

  inputs:

    num_cpus:
      type: integer
      description: Number of virtual cpus for the VM
      default: 2
      constraints:
        - valid_values: [2, 4, 8, 16, 32, 64]

    num_gpus:
      type: integer
      description: Number of GPUs for the VM
      default: 0
      constraints:
        - valid_values: [0, 1, 2]

    gpu_model:
      type: string
      default: ""
      constraints:
        - valid_values: [ "", "T4", "A30"]          

    mem_size:
      type: scalar-unit.size
      description: Amount of memory for the VM
      default: 4 GB
      constraints:
        - valid_values: [4 GB, 8 GB, 16 GB, 32 GB, 64 GB, 128 GB]

    disk_size:
      type: scalar-unit.size
      description: Size of the local disk available to applications running on the VM
      default: 50 GB
      required: yes

    os_distribution:
      type: string
      default: ubuntu
      description: Operating System distro
      constraints:
        - valid_values: ["ubuntu"]

    os_version:
      type: version
      default: 20.04
      description: Operating System distribution version
      constraints:
        - valid_values: [20.04]

    users:
      type: list
      description: list of users to create on the VM
      entry_schema:
        type: tosca.datatypes.indigo.User
      default: []
      required: false

    iam_url:
      type: string
      default: "https://iam.cloud.infn.it"
      description: IAM Instance for end user authentication

    iam_subject:
      type: string
      default: ""
      description: IAM owner subject      

    iam_groups:
      type: string
      default: "ml-infn-users"
      description: IAM groups for authorization management

    iam_admin_groups:
      type: string
      default: "ml-infn"
      description: IAM groups for JupyterHub ADMIN authorization management

    enable_monitoring:
      type: boolean
      default: false
      description: Enable/disable monitoring

    jupyter_images:
      type: string
      default: "dodasts/ml-infn-lab:v1.0.6-ml-infn"
      description: Default image for jupyter server

    jupyter_use_gpu:
      type: boolean
      default: true
      description: Enable GPU utilization on jupyter

    jupyterlab_collaborative:
      type: boolean
      default: false
      description: enable the jupyter collaborative service

    jupyterlab_collaborative_use_gpu:
      type: boolean
      default: false
      description: enable the GPU on jupyter collaborative service

    jupyterlab_collaborative_image:
      type: string
      default: "dodasts/ml-infn-jlabc:v1.0.6-ml-infn"
      description: Default image for jupyter collaborative service

    cvmfs_repos:
      type: string
      default: "cms.cern.ch sft.cern.ch atlas.cern.ch"
      description: CMFS repositories to mount
    
    gpu_partition_flavor:
      type: string
      default: "None"
      description: Enable GPU Partitioning and declare its flavor. Works only on Nvidia A100 GPUs
      constraints:
        - valid_values: ["None","2x 3g.40gb MIG GPUs","3x 2g.20gb MIG GPUs","7x 1g.10gb MIG GPUs"]

    ports:
      description: Ports to open on the VM
      type: map
      required: false
      default:
        {
          "traefik-web": { "protocol": "tcp", "source": 80 },
          "traefik-websecure": { "protocol": "tcp", "source": 443 },
          "jupyter": { "protocol": "tcp", "source": 8888 },
          "jupyter-collaborative": { "protocol": "tcp", "source": 8889 },
          "grafana": { "protocol": "tcp", "source": 3000 },
        }
      constraints:
        - min_length: 0
      entry_schema:
        type: tosca.datatypes.indigo.network.PortSpec

    certificate_type:
      required: no
      type: string
      default: letsencrypt-prod
      constraints:
        - valid_values: [ 'letsencrypt-prod', 'letsencrypt-staging', 'self-signed' ]

  node_templates:

    ml_install:
      type: tosca.nodes.DODAS.single-node-jupyterhub
      properties:
        iam_url: { get_input: iam_url }
        iam_subject: { get_input: iam_subject }
        iam_groups: { get_input: iam_groups }
        iam_admin_groups: { get_input: iam_admin_groups }
        monitoring: { get_input: enable_monitoring }
        jupyter_images: { get_input: jupyter_images }
        jupyter_use_gpu: { get_input: jupyter_use_gpu }
        jupyterlab_collaborative: { get_input: jupyterlab_collaborative }
        jupyterlab_collaborative_use_gpu:
          { get_input: jupyterlab_collaborative_use_gpu }
        jupyterlab_collaborative_image:
          { get_input: jupyterlab_collaborative_image }
        cvmfs_repos: { get_input: cvmfs_repos }
        gpu_model: { get_input: gpu_model }
        gpu_partition_flavor: { get_input: gpu_partition_flavor }
        dns_name: { concat: [get_attribute: [HOST, public_address, 0], ".myip.cloud.infn.it"] }
        cert_manager_type: { get_input: certificate_type }
      requirements:
        - host: vm_server

    pub_network:
      type: tosca.nodes.network.Network
      properties:
        network_type: public

    server_pub_port:
      type: tosca.nodes.network.Port
      properties:
        order: 1
      requirements:
        - binding: vm_server
        - link: pub_network

    priv_network:
      type: tosca.nodes.network.Network
      properties:
        network_type: private

    server_priv_port:
      type: tosca.nodes.network.Port
      properties:
        order: 0
      requirements:
        - binding: vm_server
        - link: priv_network

    vm_server:
      type: tosca.nodes.indigo.Compute
      properties:
        os_users: { get_input: users }
      capabilities:
        endpoint:
          properties:
            ports: { get_input: ports }
        scalable:
          properties:
            count: 1
        host:
          properties:
            num_cpus: { get_input: num_cpus }
            mem_size: { get_input: mem_size }
            num_gpus: { get_input: num_gpus }
            gpu_model: { get_input: gpu_model }
            disk_size: { get_input: disk_size }
        os:
          properties:
            distribution: { get_input: os_distribution }
            version: { get_input: os_version }

  outputs:

    node_ip:
      value: { get_attribute: [vm_server, public_address, 0] }
    jupyter_endpoint:
      value:
        {
          concat:
            [
              "https://",
              get_attribute: [vm_server, public_address, 0],
              ".myip.cloud.infn.it",
              ":8888",
            ],
        }
    grafana_endpoint:
      value:
        {
          concat:
            [
              "https://",
              get_attribute: [vm_server, public_address, 0],
              ".myip.cloud.infn.it",
              ":3000",
            ],
        }
    os_users:
      value: { get_property: [vm_server, os_users, 0] }
