tosca_definitions_version: tosca_simple_yaml_1_0

imports:
  - indigo_custom_types: https://baltig.infn.it/infn-cloud/tosca-types/raw/master/custom_types.yaml

description: Deploy a complete Spark 3.0.1 + Jupyter Notebook on top of a Kubernetes (K8s) computing cluster

metadata:
  display_name: Spark + Jupyter cluster
  icon: https://paas.cloud.infn.it/public/images/spark.png
  allowed_groups: "beta-testers,developers,orchestrator-admin"
  template_type: "kubernetes"

topology_template:

  inputs:

    admin_token:
      description: token for accessing K8s dashboard and Grafana admin password
      type: string
      required: yes

    number_of_masters:
      description: number of VMs for K8s master
      type: integer
      required: yes
      constraints:
        - valid_values: [ 1 ]

    num_cpus_master: 
      description: number of CPU for K8s master VM
      type: integer
      default: 4

    mem_size_master:
      description: memory size for K8s master VM
      type: string
      default: "8 GB"

    number_of_slaves:
      description: number of K8s node VMs
      type: integer
      default: 1 

    num_cpus_slave: 
      description: number of CPUs for K8s node VM
      type: integer
      default: 4

    mem_size_slave:
      description: memory size for K8s node VM
      type: string
      default: "8 GB"
    
    s3_bucket:
      type: string
      description: S3 bucket
    
    s3_endpoint:
      type: string
      description: "S3 endpoint (http://endpoint:9000)"
      default: "https://minio.cloud.infn.it/"



  node_templates:

    pub_network:
      type: tosca.nodes.network.Network
      properties:
        network_type: public

    server_pub_port:
      type: tosca.nodes.network.Port
      properties:
        order: 1
      requirements:
        - binding: k8s_master_server
        - link: pub_network

    priv_network:
      type: tosca.nodes.network.Network
      properties:
        network_type: private

    server_priv_port:
      type: tosca.nodes.network.Port
      properties:
        order: 0
      requirements:
        - binding: k8s_master_server
        - link: priv_network

    slave_priv_port:
      type: tosca.nodes.network.Port
      properties:
        order: 0
      requirements:
        - binding: k8s_slave_server
        - link: priv_network

    helm_prom:
      type: tosca.nodes.DODAS.HelmInstall
      properties:
        name: "prometheus"
        chart: "prometheus/prometheus"
        helm_version: v3
        inline_options: "-n prometheus --create-namespace"
        repos:
          - { name: prometheus, url: "https://prometheus-community.github.io/helm-charts" }
        values_file: |
          server:
            service:
              type: NodePort
              nodePort: 30080
            persistentVolume:
              enabled: false
          alertmanager:
            enabled: false
      requirements:
        - host: k8s_master_server
        - dependency: k8s_slave

    helm_kube_eagle:
      type: tosca.nodes.DODAS.HelmInstall
      properties:
        name: "kube-eagle"
        chart: "kube-eagle/kube-eagle"
        helm_version: v3
        inline_options: "-n kube-eagle --create-namespace" 
        repos:
          - { name: kube-eagle, url: "https://raw.githubusercontent.com/cloudworkz/kube-eagle-helm-chart/master" }
        # TODO: create namespace
        #inline_options:
        #  - "--namespace monitoring"
      requirements:
        - host: k8s_master_server
        - dependency: k8s_slave

    # CREATE GRAFANA ADMIN PASSWORD AND SECRET
    ## TODO: also create namespace
    grafana_secrets:
      type: tosca.nodes.DODAS.KubeCreate.Grafana
      properties:
        externalParams: [] # TO BE REMOVED IN TYPES
        name: grafana-secrets
        namespace: "grafana"
        admin_pwd: { get_input: admin_token }
        manifest_file: |
          apiVersion: v1                                                                                                     
          kind: Namespace                                                                                                    
          metadata:                                                                                                          
            name: grafana                                                                                                    
          ---
          apiVersion: v1
          kind: Secret
          metadata:
            name: grafana-secrets
          type: Opaque
          stringData:
            admin-user: admin
            admin-password: {{ admin_pwd }}
      requirements:
        - host: k8s_master_server
        - dependency: k8s_slave

    helm_grafana:
      type: tosca.nodes.DODAS.HelmInstall
      properties:
        name: "grafana"
        chart: "grafana/grafana"
        inline_options: "-n grafana --create-namespace"
        repos:
          - { name: grafana, url: "https://grafana.github.io/helm-charts" }
        helm_version: v3
        values_file: |
          admin:
            existingSecret: grafana-secrets
          service:
            type: NodePort
            nodePort: 31900
          datasources:
            datasources.yaml:
              apiVersion: 1
              datasources:
              - name: Prometheus
                type: prometheus
                url: http://prometheus-server.prometheus.svc.cluster.local
                access: proxy
                isDefault: true
          dashboards:
            default:
              prometheus-stats:
                # Ref: https://grafana.com/dashboards/10000
                gnetId: 10000
                revision: 1
                datasource: Prometheus
              kube-eagle-stats:
                # Ref: https://grafana.com/dashboards/9871
                gnetId: 9871
                revision: 2
                datasource: Prometheus
              spark-stats:
                # Ref: https://grafana.com/dashboards/7890
                gnetId: 7890
                revision: 4
                datasource: Prometheus  
          dashboardProviders:
            dashboardproviders.yaml:
              apiVersion: 1
              providers:
              - name: 'default'
                orgId: 1
                folder: ''
                type: file
                disableDeletion: false
                editable: true
                options:
                  path: /var/lib/grafana/dashboards
      requirements:
        - host: k8s_master_server
        - dependency: grafana_secrets
        - dependency: helm_prom

    helm_install:
      type: tosca.nodes.DODAS.HelmInstall.Spark
      properties:
        name: "hub"
        chart: "dodas/jupyterhub"
        repos:
        - { name: dodas, url: "https://dodas-ts.github.io/helm_charts" }
        externalIp: { get_attribute: [ k8s_master_server , public_address, 0 ]  }
        s3_bucket: { get_input: s3_bucket }
        s3_endpoint : { get_input: s3_endpoint }
        helm_version: v3
        values_file: |
          hub:
            host: {{ externalIp }}
          s3:
            bucket: {{ s3_bucket }}
            endpoint: {{ s3_endpoint }}
      requirements:
        - host: k8s_master_server
        - dependency: k8s_master

    k8s_master:
      type: tosca.nodes.DODAS.FrontEnd.Kubernetes
      properties:
        admin_token: { get_input: admin_token }
      requirements:
        - host: k8s_master_server

    k8s_slave:
      type: tosca.nodes.DODAS.WorkerNode.Kubernetes
      properties:
        front_end_ip: { get_attribute: [ k8s_master_server, private_address, 0 ] }
      requirements:
        - host: k8s_slave_server

    k8s_master_server:
      type: tosca.nodes.indigo.Compute
      capabilities:
        endpoint:
          properties:
            ports:
              kubeconfig:
                protocol: tcp
                source: 6443
              dashboard:
                protocol: tcp
                source: 30443
              jupyter:
                protocol: tcp
                source: 30888
              grafana:
                protocol: tcp
                source: 31900
        scalable:
          properties:
            count: { get_input: number_of_masters }
        host:
          properties:
            num_cpus: { get_input: num_cpus_master }
            mem_size: { get_input: mem_size_master } 
        os:
          properties:
            distribution: ubuntu
            version: 16.04

    k8s_slave_server:
      type: tosca.nodes.indigo.Compute
      capabilities:
        scalable:
          properties:
            count: { get_input: number_of_slaves }
        host:
          properties:
            num_cpus: { get_input: num_cpus_slave }
            mem_size: { get_input: mem_size_slave } 
        os:
          properties:
            distribution: ubuntu
            version: 16.04

  policies:
    - deploy_on_specific_site:
        type: tosca.policies.indigo.SlaPlacement
        properties:
          sla_id: 7868ea9d-16d1-4aa7-81ca-613fde477a08

  outputs:
    k8s_dashboard:
      value: { concat: [ 'https://', get_attribute: [ k8s_master_server, public_address, 0 ], ':30443' ] }
    k8s_api:
      value: { concat: [ 'https://', get_attribute: [ k8s_master_server, public_address, 0 ], ':6443' ] }
    jupyter_endpoint:
      value: { concat: [ 'http://', get_attribute: [ k8s_master_server, public_address, 0 ], ':30888/hub' ] }
    k8s_master_ip:
      value: { get_attribute: [ k8s_master_server, public_address, 0 ] }
    k8s_master_node_creds:
      value: { get_attribute: [ k8s_master_server, endpoint, credential, 0 ] }
    k8s_wn_ip:
      value: { get_attribute: [ k8s_slave_server, private_address ] }
    k8s_wn_node_creds:
      value: { get_attribute: [ k8s_slave_server, endpoint, credential ] }
    grafana_endpoint:
      value: { concat: [ 'http://', get_attribute: [ k8s_master_server, public_address, 0 ], ':31900' ] }
