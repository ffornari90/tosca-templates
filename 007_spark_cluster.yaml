tosca_definitions_version: tosca_simple_yaml_1_0

imports:
  - indigo_custom_types: https://baltig.infn.it/infn-cloud/tosca-types/raw/master/custom_types.yaml

description: Deploy a complete Spark 2.4.4+Jupyter computing cluster

metadata:
  display_name: Spark + Jupyter cluster
  icon: https://paas.cloud.infn.it/public/images/spark.png
  allowed_groups: "beta-testers,developers,orchestrator-admin"

topology_template:

  inputs:

    admin_token:
      description: token for accessing k8s dashboard
      type: string
      required: yes

    jupyter_token:
      description: token for accessing jupyter notebook
      type: string
      required: yes

    number_of_masters:
      description: number of VMs for K8s master
      type: integer
      required: yes
      constraints:
        - valid_values: [ 1 ]

    num_cpus_master: 
      description: number of CPU for K8s master VM
      type: integer
      default: 4

    mem_size_master:
      description: memory size for K8s master VM
      type: string
      default: "8 GB"

    number_of_slaves:
      description: number of K8s node VMs
      type: integer
      default: 1 

    num_cpus_slave: 
      description: number of CPUs for K8s node VM
      type: integer
      default: 4

    mem_size_slave:
      description: memory size for K8s node VM
      type: string
      default: "8 GB"


  node_templates:

    helm_install:
      type: tosca.nodes.DODAS.HelmInstall.Spark
      properties:
        name: "spark"
        chart: "dodas/spark"
        repos:
        - { name: dodas, url: "https://dodas-ts.github.io/helm_charts" }
        externalIp: { get_attribute: [ k8s_master_server , public_address, 0 ]  }
        jupyter_token: { get_input: jupyter_token }
        values_file: |
          externalIp:
            enabled: false
          master:
            image: dodasts/spark-k8s-py
            imageTag: v2.0.0-rc1
            jupyter:
              image: dodasts/pyspark-notebook
              token: {{ jupyter_token }}
              tag: v2.0.0-rc1
          kubeconfig_path: /etc/kubernetes/admin.conf
      requirements:
        - host: k8s_master_server
        - dependency: k8s_master

    k8s_master:
      type: tosca.nodes.DODAS.FrontEnd.Kubernetes
      properties:
        admin_token: { get_input: admin_token }
      requirements:
        - host: k8s_master_server

    k8s_slave:
      type: tosca.nodes.DODAS.WorkerNode.Kubernetes
      properties:
        front_end_ip: { get_attribute: [ k8s_master_server, private_address, 0 ] }
      requirements:
        - host: k8s_slave_server

    k8s_master_server:
      type: tosca.nodes.indigo.Compute
      capabilities:
        endpoint:
          properties:
            network_name: PUBLIC
            ports:
              dashboard:
                protocol: tcp
                source: 30443
              webui:
                protocol: tcp
                source: 30808
              jupyter:
                protocol: tcp
                source: 30888
        scalable:
          properties:
            count: { get_input: number_of_masters }
        host:
          properties:
            num_cpus: { get_input: num_cpus_master }
            mem_size: { get_input: mem_size_master } 
        os:
          properties:
            distribution: ubuntu
            version: 16.04

    k8s_slave_server:
      type: tosca.nodes.indigo.Compute
      capabilities:
        endpoint:
          properties:
            network_name: PRIVATE
        scalable:
          properties:
            count: { get_input: number_of_slaves }
        host:
          properties:
            num_cpus: { get_input: num_cpus_slave }
            mem_size: { get_input: mem_size_slave } 
        os:
          properties:
            distribution: ubuntu
            version: 16.04

  policies:
    - deploy_on_specific_site:
        type: tosca.policies.indigo.SlaPlacement
        properties:
          sla_id: 5e1daa90d000a819fe11ca56

  outputs:
    label:
      value: Spark
    k8s_endpoint:
      value: { concat: [ 'https://', get_attribute: [ k8s_master_server, public_address, 0 ], ':30443' ] }
    jupyter_endpoint:
      value: { concat: [ 'http://', get_attribute: [ k8s_master_server, public_address, 0 ], ':30888' ] }
    sparkui_endpoint:
      value: { concat: [ 'http://', get_attribute: [ k8s_master_server, public_address, 0 ], ':30808' ] }
    k8s_master_ip:
      value: { get_attribute: [ k8s_master_server, public_address, 0 ] }
    k8s_master_node_creds:
      value: { get_attribute: [ k8s_master_server, endpoint, credential, 0 ] }
    k8s_wn_ip:
      value: { get_attribute: [ k8s_slave_server, private_address, 0 ] }
    k8s_wn_node_creds:
      value: { get_attribute: [ k8s_slave_server, endpoint, credential, 0 ] }
