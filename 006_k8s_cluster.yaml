tosca_definitions_version: tosca_simple_yaml_1_0

imports:
  - indigo_custom_types: https://paas.cloud.infn.it/public/tosca/custom_types.yaml

description: Deploy a Kubernetes cluster

metadata:
  display_name: Kubernetes cluster
  icon: https://paas.cloud.infn.it/public/images/kubernetes.png 
  allowed_groups: "beta-testers,developers,orchestrator-admin"

topology_template:

  inputs:

    admin_token:
      type: string
      required: yes

    number_of_masters:
      type: integer
      default: 1

    num_cpus_master: 
      type: integer
      default: 4

    mem_size_master:
      type: string
      default: "8 GB"

    number_of_slaves:
      type: integer
      default: 1 

    num_cpus_slave: 
      type: integer
      default: 4

    mem_size_slave:
      type: string
      default: "8 GB"

  node_templates:


    k8s_master:
      type: tosca.nodes.DODAS.FrontEnd.Kubernetes
      properties:
        admin_token: { get_input: admin_token }
        # kube_version: 1.14.0
        # kube_front_end_ip: { get_attribute: [ k8s_master_server, private_address, 0 ] } 
      requirements:
        - host: k8s_master_server

    k8s_slave:
      type: tosca.nodes.DODAS.WorkerNode.Kubernetes 
      properties:
        front_end_ip: { get_attribute: [ k8s_master_server, private_address, 0 ] }
        #front_end_ip: { get_attribute: [ k8s_master_server, public_address, 0 ] }
        #kube_version: 1.14.0
        #nfs_master_ip: { get_attribute: [ k8s_master_server, private_address, 0 ] }
      requirements:
        - host: k8s_slave_server

    k8s_master_server:
      type: tosca.nodes.indigo.Compute
      capabilities:
        endpoint:
          properties:
            #network_name: infn-farm.PUBLIC
            network_name: PUBLIC
            ports:
              dashboard:
                protocol: tcp
                source: 30443
        scalable:
          properties:
            count: { get_input: number_of_masters }
        host:
          properties:
            #instance_type:  m1.medium
            num_cpus: { get_input: num_cpus_master }
            mem_size: { get_input: mem_size_master } 
        os:
          properties:
            distribution: ubuntu
            version: 16.04
            #image: "ost://keystone.cloud.infn.it/9e6c6447-e51b-4c49-a136-df3473b8090e"

    k8s_slave_server:
      type: tosca.nodes.indigo.Compute
      capabilities:
        endpoint:
          properties:
            #network_name: test-net.PRIVATE
            network_name: PRIVATE
            #network_name: PUBLIC 
        scalable:
          properties:
            count: { get_input: number_of_slaves }
        host:
          properties:
            #instance_type:  m1.large
            num_cpus: { get_input: num_cpus_slave }
            mem_size: { get_input: mem_size_slave } 
        os:
          properties:
            #image: "ost://openstack.fisica.unipg.it/1c334195-3203-43cb-b13f-d3159304a6d6"
            #image: "ost://keystone.cloud.infn.it/9e6c6447-e51b-4c49-a136-df3473b8090e"
            distribution: ubuntu
            version: 16.04

  policies:
    - deploy_on_specific_site:
        type: tosca.policies.indigo.SlaPlacement
        properties:
          sla_id: 5e1daa90d000a819fe11ca56

  outputs:
    label:
      value: Kubernetes
    k8s_endpoint:
      value: { concat: [ 'https://', get_attribute: [ k8s_master_server, public_address, 0 ], ':30443' ] }
    k8s_master_ip:
      value: { get_attribute: [ k8s_master_server, public_address, 0 ] }
    k8s_master_node_creds:
      value: { get_attribute: [ k8s_master_server, endpoint, credential, 0 ] }
    k8s_wn_ip:
      value: { get_attribute: [ k8s_slave_server, private_address, 0 ] }
    k8s_wn_node_creds:
      value: { get_attribute: [ k8s_slave_server, endpoint, credential, 0 ] }
