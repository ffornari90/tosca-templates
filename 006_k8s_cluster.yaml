tosca_definitions_version: tosca_simple_yaml_1_0

imports:
  - indigo_custom_types: https://baltig.infn.it/infn-cloud/tosca-types/raw/master/custom_types.yaml

description: Deploy a single master Kubernetes 1.17.0 cluster

metadata:
  display_name: Kubernetes cluster
  icon: https://paas.cloud.infn.it/public/images/kubernetes.png
  allowed_groups: "beta-testers,developers,orchestrator-admin"
  template_type: "kubernetes"

topology_template:

  inputs:

    admin_token:
      description: password token for accessing k8s dashboard and grafana dashboard
      type: string
      required: yes

    number_of_masters:
      description: number of VMs for K8s master
      type: integer
      required: yes
      constraints:
        - valid_values: [ 1 ]

    num_cpus_master:
      description: number of CPU for K8s master VM
      type: integer
      default: 4

    mem_size_master:
      description: memory size for K8s master VM
      type: string
      default: "8 GB"

    number_of_nodes:
      description: number of K8s node VMs
      type: integer
      default: 1

    num_cpus_node:
      description: number of CPUs for K8s node VM
      type: integer
      default: 4

    mem_size_node:
      description: memory size for K8s node VM
      type: string
      default: "8 GB"

    ports:
      description:
      type: map
      required: false
      default: { "http": { "protocol": "tcp", "source": 80 }, "api": { "protocol": "tcp", "source": 6443 }, "https": { "protocol": "tcp", "source": 443 }}
      constraints:
        - min_length: 0
      entry_schema:
        type: tosca.datatypes.network.PortSpec
      description: Ports to open on the K8s master VM

  node_templates:

    k8s_master:
      type: tosca.nodes.DODAS.FrontEnd.Kubernetes
      properties:
        kube_version: 1.19.6
        admin_token: { get_input: admin_token }
      requirements:
        - host: k8s_master_server

    k8s_node:
      type: tosca.nodes.DODAS.WorkerNode.Kubernetes
      properties:
        kube_version: 1.19.6
        front_end_ip: { get_attribute: [ k8s_master_server, private_address, 0 ] }
      requirements:
        - host: k8s_node_server

    k8s_master_server:
      type: tosca.nodes.indigo.Compute
      capabilities:
        endpoint:
          properties:
            #network_name: infn-farm.PUBLIC
            network_name: PUBLIC
            ports: { get_input: ports }
        scalable:
          properties:
            count: { get_input: number_of_masters }
        host:
          properties:
            #instance_type:  m1.medium
            num_cpus: { get_input: num_cpus_master }
            mem_size: { get_input: mem_size_master }
        os:
          properties:
            distribution: ubuntu
            version: 16.04
            #image: "ost://keystone.cloud.infn.it/9e6c6447-e51b-4c49-a136-df3473b8090e"

    k8s_node_server:
      type: tosca.nodes.indigo.Compute
      capabilities:
        endpoint:
          properties:
            #network_name: test-net.PRIVATE
            network_name: PRIVATE
            #network_name: PUBLIC
        scalable:
          properties:
            count: { get_input: number_of_nodes }
        host:
          properties:
            #instance_type:  m1.large
            num_cpus: { get_input: num_cpus_node }
            mem_size: { get_input: mem_size_node }
        os:
          properties:
            #image: "ost://openstack.fisica.unipg.it/1c334195-3203-43cb-b13f-d3159304a6d6"
            #image: "ost://keystone.cloud.infn.it/9e6c6447-e51b-4c49-a136-df3473b8090e"
            distribution: ubuntu
            version: 16.04

  policies:
    - deploy_on_specific_site:
        type: tosca.policies.indigo.SlaPlacement
        properties:
          sla_id: 5e1daa90d000a819fe11ca56

  outputs:
    k8s_endpoint:
      value: { concat: [ 'https://dashboard.', get_attribute: [ k8s_master_server, public_address, 0 ],  '.myip.cloud.infn.it ] }
    grafana_endpoint:
      value: { concat: [ 'https://grafana.', get_attribute: [ k8s_master_server, public_address, 0 ], '.myip.cloud.infn.it' ] }
    grafana_username:
      value: admin
    k8s_master_ip:
      value: { get_attribute: [ k8s_master_server, public_address, 0 ] }
    k8s_master_node_creds:
      value: { get_attribute: [ k8s_master_server, endpoint, credential, 0 ] }
    k8s_wn_ip:
      value: { get_attribute: [ k8s_node_server, private_address ] }
    k8s_wn_node_creds:
      value: { get_attribute: [ k8s_node_server, endpoint, credential ] }
