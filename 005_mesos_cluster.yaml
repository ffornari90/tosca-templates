tosca_definitions_version: tosca_simple_yaml_1_0

imports:
  - indigo_custom_types: https://baltig.infn.it/infn-cloud/tosca-types/raw/master/custom_types.yaml

description: Apache Mesos abstracts CPU, memory, storage, and other compute resources away from machines (physical or virtual), enabling fault-tolerant and elastic distributed systems to easily be built and run effectively

metadata:
  display_name: Apache Mesos cluster

topology_template:

  inputs:

    mesos_password:
      type: string
      description: Admin password for accessing Mesos HTTP service
      required: yes

    marathon_password:
      type: string
      description: Admin password for accessing Marathon HTTP service
      required: yes

    slave_num:
      type: integer
      description: Number of slave nodes in the cluster
      default: 2
      required: yes

    slave_cpus:
      type: integer
      description: Numer of CPUs for the slave node
      default: 1
      required: yes

    slave_mem:
      type: scalar-unit.size
      description: Amount of Memory for the slave node
      default: 2 GB
      required: yes

    master_cpus:
      type: integer
      description: Numer of CPUs for the master node
      default: 2
      required: yes

    master_mem:
      type: scalar-unit.size
      description: Amount of Memory for the master node
      default: 4 GB
      required: yes

    admin_email:
      type: string
      description: Admin email address
      required: yes

    users:
      type: list
      description: list of users to create on the VM
      entry_schema:
        type: tosca.datatypes.indigo.User
      default: []
      required: false
      


  node_templates:

    pub_network:
      type: tosca.nodes.network.Network
      properties:
        network_type: public

    master_pub_port:
      type: tosca.nodes.network.Port
      properties:
        order: 1
      requirements:
        - binding: mesos_master_server
        - link: pub_network

    lb_pub_port:
      type: tosca.nodes.network.Port
      properties:
        order: 1
      requirements:
        - binding: mesos_lb_server
        - link: pub_network

    priv_network:
      type: tosca.nodes.network.Network
      properties:
        network_type: private

    master_priv_port:
      type: tosca.nodes.network.Port
      properties:
        order: 0
      requirements:
        - binding: mesos_master_server
        - link: priv_network

    lb_priv_port:
      type: tosca.nodes.network.Port
      properties:
        order: 0
      requirements:
        - binding: mesos_lb_server
        - link: priv_network

    node_priv_port:
      type: tosca.nodes.network.Port
      properties:
        order: 0
      requirements:
        - binding: mesos_slave_server
        - link: priv_network

          

    mesos_master:
      type: tosca.nodes.indigo.MesosMaster
      properties:
        certbot_admin_email: { get_input: admin_email }       
        mesos_masters_list: { get_attribute: [ HOST, private_address ] }
        mesos_password: { get_input: mesos_password }
        marathon_password: { get_input: marathon_password }
        dns_name: { concat : [ {get_attribute: [ HOST, public_address, 0 ]}, '.myip.cloud.infn.it' ]}
      requirements:
        - host: mesos_master_server

    mesos_slave:
      type: tosca.nodes.indigo.MesosSlave
      properties:
        master_ips: { get_attribute: [ mesos_master_server, private_address ] }
        front_end_ip: { get_attribute: [ mesos_master_server, private_address, 0 ] }
      requirements:
        - host: mesos_slave_server
      capabilities:
        wn:
          properties:
            default_instances: 1

    mesos_load_balancer:
      type: tosca.nodes.indigo.MesosLoadBalancer
      properties:
        master_ips: { get_attribute: [ mesos_master_server, private_address ] }
        marathon_password: { get_input: marathon_password }
      requirements:
        - host: mesos_lb_server

    mesos_master_server:
      type: tosca.nodes.indigo.Compute
      properties:
        os_users: { get_input: users }
      capabilities:
        endpoint:
          properties:
            dns_name: mesosserverpublic
            ports:
              certbot_port:
                protocol: tcp
                source: 80
              mesos_port:
                protocol: tcp
                source: 5050
              marathon_port:
                protocol: tcp
                source: 8443
        scalable:
          properties:
            count: 1
        host:
          properties:
            num_cpus: { get_input: master_cpus }
            mem_size: { get_input: master_mem }
        os:
          properties:
            type: linux
            distribution: ubuntu
            version: 20.04

    mesos_slave_server:
      type: tosca.nodes.indigo.Compute
      properties:
        os_users: { get_input: users }
      capabilities:
        scalable:
          properties:
            count: { get_input: slave_num }
        host:
          properties:
            num_cpus: { get_input: slave_cpus }
            mem_size: { get_input: slave_mem }
        os:
          properties:
            type: linux
            distribution: ubuntu
            version: 20.04

    mesos_lb_server:
      type: tosca.nodes.indigo.Compute
      properties:
        os_users: { get_input: users }
      capabilities:
        endpoint:
          properties:
            ports:
              all_tcp:
                protocol: tcp
                source_range: [ 10000, 10100 ]
        scalable:
          properties:
            count: 1
        host:
          properties:
            num_cpus: 2
            mem_size: 2 GB
        os:
          properties:
            type: linux
            distribution: ubuntu
            version: 20.04

  outputs:
    mesos_endpoint:
      value: { concat: [ 'https://', get_attribute: [ mesos_master_server, public_address, 0 ], '.myip.cloud.infn.it', ':5050' ] }
    marathon_endpoint:
      value: { concat: [ 'https://', get_attribute: [ mesos_master_server, public_address, 0 ], '.myip.cloud.infn.it', ':8443' ] }
    mesos_lb_ip:
      value: { get_attribute: [ mesos_lb_server, public_address ] }
    mesos_master:
      value: { get_attribute: [ mesos_master_server, public_address ] }
    os_users:
      value: { get_property: [ mesos_master_server, os_users, 0 ] }      
