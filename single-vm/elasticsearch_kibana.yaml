tosca_definitions_version: tosca_simple_yaml_1_0

imports:
  - indigo_custom_types: https://baltig.infn.it/infn-cloud/tosca-types/raw/master/custom_types.yaml

description: >
  Deploy a virtual machine pre-configured with the Elasticsearch search and analytics engine and with Kibana for simple visualization of data with charts and graphs in Elasticsearch

metadata:
  display_name: Elasticsearch and Kibana (version 8.0.0)


topology_template:

  inputs:

    num_cpus:
      type: integer
      description: Number of virtual cpus for the VM
      default: 2
      constraints:
      - valid_values: [ 2, 4 ]

    mem_size:
      type: scalar-unit.size
      description: Amount of memory for the VM
      default: 4 GB
      constraints:
      - valid_values: [ 4 GB, 8 GB ]

    contact_email:
      type: string
      required: yes
      description: Insert your Email for receiving notifications

    elastic_password:
      type: string
      required: yes
      description: Password for user elastic

    kibana_password:
      type: string
      required: yes
      description: Password for user kibana_system (internal user)

    volume_size:
      type: scalar-unit.size
      description: Size of the volume to be used to store the data
      default: 10 GB

    mountpoint:
      type: string
      default: /data
      description: Path to mount the data volume


    users:
      type: list
      description: list of users to create on the VM
      entry_schema:
        type: tosca.datatypes.indigo.User
      default: []
      required: false

  node_templates:

    pub_network:
      type: tosca.nodes.network.Network
      properties:
        network_type: public

    server_pub_port:
      type: tosca.nodes.network.Port
      properties:
        order: 1
      requirements:
        - binding: kibana_es_server
        - link: pub_network

    priv_network:
      type: tosca.nodes.network.Network
      properties:
        network_type: private

    server_priv_port:
      type: tosca.nodes.network.Port
      properties:
        order: 0
      requirements:
        - binding: kibana_es_server
        - link: priv_network


    docker_compose_service:
      type: tosca.nodes.indigo.DockerCompose.Elastic
      properties:
        project_name: elastic
        environment_variables:
          - ELASTIC_VERSION: "8.0.0"
          - ELASTIC_PASSWORD: { get_input: elastic_password }
          - KIBANA_PASSWORD: { get_input: kibana_password }
          - CERT_EMAIL: { get_input: contact_email }
          - DATA_DIR: { get_input: mountpoint }
      requirements:
        - host: kibana_es_server

    kibana_es_server:
      type: tosca.nodes.indigo.Compute
      properties:
        os_users: { get_input: users }
        tags:
          ENDPOINTS: "elastic#kibana"
      capabilities:
        endpoint:
          properties:
            ports:
              http:
                protocol: tcp
                source: 80
              https:
                protocol: tcp
                source: 443
        host:
          properties:
            num_cpus: { get_input: num_cpus }
            mem_size: { get_input: mem_size }
        os:
          properties:
            distribution: ubuntu
            type: linux
            version: 20.04
      requirements:
        - local_storage:
            node: block_device
            capability: tosca.capabilities.Attachment
            relationship:
              type: tosca.relationships.AttachesTo
              properties:
                location: { get_input: mountpoint }
                device: vdb

    block_device:
      type: tosca.nodes.BlockStorage
      properties:
        size: { get_input: volume_size }


  outputs:
    kibana_endpoint:
      value: { concat: [ 'https://kibana.', get_attribute: [ kibana_es_server, public_address, 0 ], '.myip.cloud.infn.it' ] }
    kibana_username:
      value: elastic
    elasticsearch_endpoint:
      value: { concat: [ 'https://elastic.', get_attribute: [ kibana_es_server, public_address, 0 ], '.myip.cloud.infn.it' ] }
    node_ip:
      value: { get_attribute: [ kibana_es_server, public_address, 0 ] }
    node_creds:
      value: { get_attribute: [ kibana_es_server, endpoint, credential, 0 ] }
    os_users:
      value: { get_property: [ kibana_es_server, os_users, 0 ] }
