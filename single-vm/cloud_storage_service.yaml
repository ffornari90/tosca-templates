tosca_definitions_version: tosca_simple_yaml_1_0

imports:
  - indigo_custom_types: https://baltig.infn.it/infn-cloud/tosca-types/raw/v1.0.1/tosca_types/applications/storage_apps_types.yaml

description: >
  Deploy a cloud storage service

metadata:
  display_name: Sync&Share aaS

topology_template:

  inputs:

    num_cpus:
      type: integer
      description: Number of virtual cpus for the VM
      default: 2

    mem_size:
      type: scalar-unit.size
      description: Amount of memory for the VM
      default: 4 GB

    docker_storage_size:
      type: scalar-unit.size
      description: Size of the volume to be mounted in /var/lib/docker
      default: 20 GB
      constraints:
        in_range: [1 GB, 100 GB]

    contact_email:
      type: string
      required: yes
      description: Insert your Email for receiving notifications

    owncloud_admin_username:
      type: string
      default: "admin"
      description: Username for ownCloud admin access

    owncloud_admin_password:
      type: string
      required: yes
      description: Password for ownCloud admin user

    mysql_root_password:
      type: string
      required: yes
      description: Password for MySQL root

    monitoring_admin_username:
      type: string
      default: "admin"
      description: Username for the admin user of the monitoring service

    monitoring_admin_password:
      type: string
      required: yes
      description: Password for the admin user of the monitoring service

    backup_passphrase:
      type: string
      required: yes
      description: Password for backup

    owncloud_bucket_name:
      type: string
      required: yes
      description: Name of the bucket used by ownCloud

    backup_bucket_name:
      type: string
      required: yes
      description: Name of the bucket used by the monitoring system

    aws_access_key:
      type: string
      required: yes
      description: Access key for creating the buckets

    aws_secret_key:
      type: string
      required: yes
      description: Secret key for creating the buckets

    smtp_username:
      type: string
      required: yes
      description: username for SMTP

    smtp_password:
      type: string
      required: yes
      description: password for SMTP

    iam_url:
      type: string
      default: https://iam.cloud.infn.it
      description: IAM url

    iam_authorized_group:
      type: string
      required: yes
      description: IAM group authorized to access the service

    users:
      type: list
      description: list of users to create on the VM
      entry_schema:
        type: tosca.datatypes.indigo.User
      default: []
      required: false

  node_templates:

    s3_owncloud_bucket:
      type: tosca.nodes.indigo.S3Bucket
      properties:
        bucket_name: { get_input: owncloud_bucket_name }
        aws_access_key: { get_input: aws_access_key }
        aws_secret_key: { get_input: aws_secret_key }
        s3_url: 'https://s3.cloud.infn.it'
      requirements:
        - host: server

    s3_backup_bucket:
      type: tosca.nodes.indigo.S3Bucket
      properties:
        bucket_name: { get_input: backup_bucket_name }
        aws_access_key: { get_input: aws_access_key }
        aws_secret_key: { get_input: aws_secret_key }
        s3_url: 'https://s3.cloud.infn.it'
      requirements:
        - host: server

    docker_compose_service:
      type: tosca.nodes.indigo.CloudStorageService
      properties:
        owncloud_hostname: { concat: [ "data.",  get_attribute: [ HOST, public_address, 0 ], ".myip.cloud.infn.it" ] }
        nagios_hostname: { concat: [ "status.",  get_attribute: [ HOST, public_address, 0 ], ".myip.cloud.infn.it" ] }
        s3_data_bucket: { get_property: [ s3_owncloud_bucket, bucket_name ] }
        s3_backup_bucket: { get_property: [ s3_backup_bucket, bucket_name ] }
        s3_access_key: { get_property: [ s3_owncloud_bucket, aws_access_key ] }
        s3_secret_key: { get_property: [ s3_owncloud_bucket, aws_secret_key ] }
        s3_endpoint: { get_property: [ s3_owncloud_bucket, s3_url ] }
        owncloud_admin_user: { get_input: owncloud_admin_username }
        owncloud_admin_passw: { get_input: owncloud_admin_password }
        mysql_root_passw: { get_input: mysql_root_password }
        nagios_admin_user: { get_input: monitoring_admin_username  }
        nagios_admin_passw: { get_input: monitoring_admin_password }
        backup_passphrase: { get_input: backup_passphrase  }
        contact_email: { get_input: contact_email }
        smtp_username: { get_input: smtp_username }
        smtp_password: { get_input: smtp_password }
        iam_url: { get_input: iam_url }
        iam_group: { get_input: iam_authorized_group }
      requirements:
        - host: server
        - dependency: s3_owncloud_bucket
        - dependency: s3_backup_bucket

    server:
      type: tosca.nodes.indigo.Compute
      properties:
        os_users: { get_input: users }
        tags:
          ENDPOINTS: "data#status"
      capabilities:
        endpoint:
          properties:
            network_name: PUBLIC
            ports:
              http:
                protocol: tcp
                source: 80
              https:
                protocol: tcp
                source: 443
        host:
          properties:
            num_cpus: { get_input: num_cpus }
            mem_size: { get_input: mem_size }
        os:
          properties:
            distribution: ubuntu
            type: linux
            version: 20.04
      requirements:
        - local_storage:
            node: block_device
            capability: tosca.capabilities.Attachment
            relationship:
              type: tosca.relationships.AttachesTo
              properties:
                location: '/var/lib/docker'

    block_device:
      type: tosca.nodes.BlockStorage
      properties:
        size: { get_input: docker_storage_size }

  outputs:
    storage_service_endpoint:
      value: { concat: [ 'https://data.', get_attribute: [ server, public_address, 0 ], '.myip.cloud.infn.it' ] }
    status_service_endpoint:
      value: { concat: [ 'https://status.', get_attribute: [ server, public_address, 0 ], '.myip.cloud.infn.it' ] }
    backup_bucket_name:
      value: { get_property: [ s3_backup_bucket, bucket_name ] }
    node_ip:
      value: { get_attribute: [ server, public_address, 0 ] }
    node_creds:
      value: { get_attribute: [ server, endpoint, credential, 0 ] }
    os_users:
      value: { get_property: [ server, os_users, 0 ] }
