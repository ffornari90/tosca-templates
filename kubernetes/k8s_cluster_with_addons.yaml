tosca_definitions_version: tosca_simple_yaml_1_0

imports:
  - indigo_custom_types: https://baltig.infn.it/infn-cloud/tosca-types/raw/CLOUD-2062/tosca_types/infrastructure/kubernetes_types.yaml

description: Deploy a single master Kubernetes 1.28.3 cluster with a Kafka instance
metadata:
  display_name: Kubernetes with Kafka cluster

topology_template:


  inputs:

    certificate_type:
      required: no
      type: string
      default: letsencrypt-prod
      constraints:
        - valid_values: [ 'letsencrypt-prod', 'letsencrypt-staging', 'self-signed' ]

    admin_token:
      description: Password token for accessing K8s dashboard and grafana dashboard
      type: string
      required: yes

    number_of_masters:
      description: Number of VMs for K8s master
      type: integer
      required: yes
      constraints:
        - valid_values: [ 1 ]

    num_cpus_master:
      description: Number of CPU for K8s master VM
      type: integer
      default: 4

    mem_size_master:
      description: Memory size for K8s master VM
      type: string
      default: "8 GB"

    disk_size_master:
      description: Size of the local disk on K8s master VMs
      type: scalar-unit.size
      default: 20 GB

    number_of_nodes:
      description: Number of K8s node VMs
      type: integer
      default: 1

    num_cpus_node:
      description: Number of CPUs of K8s node VMs
      type: integer
      default: 4

    mem_size_node:
      description: Memory size of K8s node VMs
      type: string
      default: "8 GB"

    disk_size_node:
      description: Size of the local disk on K8s node VMs
      type: scalar-unit.size
      default: 20 GB

    number_of_nodes_with_gpu:
      description: Number of K8s nodes with GPU support
      type: integer
      default: 0

    num_cpus_node_with_gpu:
      description: Number of CPUs of K8s nodes with GPU support
      type: integer
      default: 4

    mem_size_node_with_gpu:
      description: Memory size of K8s nodes with GPU support
      type: string
      default: "8 GB"

    disk_size_node_with_gpu:
      description: Size of the local disk on K8s node VMs
      type: scalar-unit.size

    num_gpus_node:
      description: Number of GPUs for K8s nodes with GPU support
      type: integer
      default: 1
      constraints:
        - valid_values: [0, 1, 2]

    gpu_model_node:
      description: GPU model
      type: string
      default: ""
      constraints:
        - valid_values: ["", "T4", "A30"]

    enable_gpu:
      description: Flag to enable GPU support (configure software on GPU accelerated nodes)
      type: boolean
      default: false

    ports:
      description: Ports to open on the K8s master VM
      type: map
      required: false
      default: { "http": { "protocol": "tcp", "source": 80 }, "https": { "protocol": "tcp", "source": 443 }, "api": { "protocol": "tcp", "source": 6443} }
      constraints:
        - min_length: 0
      entry_schema:
        type: tosca.datatypes.indigo.network.PortSpec

    users:
      type: list
      description: list of users to create on the VM
      entry_schema:
        type: tosca.datatypes.indigo.User
      default: []
      required: false  

    kafka_enabled:
      type: boolean
      default: false
    kafka_replicas:
      type: integer
      default: 1
    kafka_enable_public_connections:
      type: boolean
      default: false
    kafka_public_port:
      type: integer
      default: 30092
    kafka_admin_user:
      type: string
      default: admin
    kafka_admin_password:
      type: string
      default: pass
    kafka_volume_longhorn_admin_user:
      type: string
      default: admin
    kafka_volume_longhorn_admin_password:
      type: string
      default: pass
    kafka_kraft_enabled:
      type: boolean
      default: false
    kafka_kraft_replicas:
      type: integer
      default: 1
    kafka_kraft_enable_public_connections:
      type: boolean
      default: false
    kafka_kraft_public_port:
      type: integer
      default: 31093
    zookeeper_enabled:
      type: boolean
      default: false      
    zookeeper_replicas:
      type: integer
      default: 1
    zookeeper_enable_public_connections:
      type: boolean
      default: false
    zookeeper_public_port:
      type: integer
      default: 32181
    kafka_ui_enabled:
      type: boolean
      default: true
    kafka_ui_admin_user:
      type: string
      default: admin
    kafka_ui_admin_password:
      type: string
      default: pass


  node_templates:

    pub_network:
      type: tosca.nodes.network.Network
      properties:
        network_type: public

    server_pub_port:
      type: tosca.nodes.network.Port
      properties:
        order: 1
      requirements:
        - binding: k8s_master_server
        - link: pub_network

    priv_network:
      type: tosca.nodes.network.Network
      properties:
        network_type: private

    server_priv_port:
      type: tosca.nodes.network.Port
      properties:
        order: 0
      requirements:
        - binding: k8s_master_server
        - link: priv_network

    node_priv_port:
      type: tosca.nodes.network.Port
      properties:
        order: 0
      requirements:
        - binding: k8s_node_server
        - link: priv_network

    node_with_gpu_priv_port:
      type: tosca.nodes.network.Port
      properties:
        order: 0
      requirements:
        - binding: k8s_node_server_with_gpu
        - link: priv_network

    k8s_master:
      type: tosca.nodes.DODAS.FrontEnd.Kubernetes
      properties:
        kube_version: 1.28.3
        admin_token: { get_input: admin_token }
        enable_gpu: { get_input: enable_gpu }
        domain: myip.cloud.infn.it
        cert_manager_type: { get_input: certificate_type }
      requirements:
        - host: k8s_master_server

    k8s_node:
      type: tosca.nodes.DODAS.WorkerNode.Kubernetes
      properties:
        kube_version: 1.28.3
        front_end_ip: { get_attribute: [ k8s_master_server, private_address, 0 ] }
      requirements:
        - host: k8s_node_server

    k8s_node_with_gpu:
      type: tosca.nodes.DODAS.WorkerNode.Kubernetes
      properties:
        kube_version: 1.28.3
        front_end_ip: { get_attribute: [ k8s_master_server, private_address, 0 ] }
        enable_gpu: { get_input: enable_gpu }
        gpu_model: { get_input: gpu_model_node }
      requirements:
        - host: k8s_node_server_with_gpu

    k8s_master_server:
      type: tosca.nodes.indigo.Compute
      properties:
        os_users: { get_input: users }
        tags:
          ENDPOINTS: "dashboard#grafana"
      capabilities:
        endpoint:
          properties:
            ports: { get_input: ports }
        scalable:
          properties:
            count: { get_input: number_of_masters }
        host:
          properties:
            num_cpus: { get_input: num_cpus_master }
            mem_size: { get_input: mem_size_master }
            disk_size: { get_input: disk_size_master }
        os:
          properties:
            distribution: ubuntu
            version: 20.04

    k8s_node_server:
      type: tosca.nodes.indigo.Compute
      properties:
        os_users: { get_input: users }
      capabilities:
        scalable:
          properties:
            count: { get_input: number_of_nodes }
        host:
          properties:
            num_cpus: { get_input: num_cpus_node }
            mem_size: { get_input: mem_size_node }
            disk_size: { get_input: disk_size_node }
            num_gpus: 0
        os:
          properties:
            distribution: ubuntu
            version: 20.04

    k8s_node_server_with_gpu:
      type: tosca.nodes.indigo.Compute
      properties:
        os_users: { get_input: users }
      capabilities:
        scalable:
          properties:
            count: { get_input: number_of_nodes_with_gpu }
        host:
          properties:
            num_cpus: { get_input: num_cpus_node_with_gpu }
            mem_size: { get_input: mem_size_node_with_gpu }
            disk_size: { get_input: disk_size_node_with_gpu }
            num_gpus: { get_input: num_gpus_node }
            gpu_model: { get_input: gpu_model_node }
        os:
          properties:
            distribution: ubuntu
            version: 20.04

    k8s_longhorn:
      type: tosca.nodes.DODAS.Kubernetes.LongHorn
      properties:
        is_enabled: { get_input: kafka_enabled }
        repos:
          - { name: longhorn, url: "https://charts.longhorn.io" }
        name: longhorn
        chart: "longhorn/longhorn"
        inline_options: "--version 1.5.1 -n longhorn-system --create-namespace"
        helm_version: v3
        values_file: |
          persistence:
            defaultClassReplicaCount: 1
      requirements:
        - host: k8s_master_server
        - dependency: k8s_master

    k8s_kafka:
      type: tosca.nodes.DODAS.Kubernetes.Kafka
      properties:
        is_enabled: { get_input: kafka_enabled }
        kafka_enabled: { get_input: kafka_enabled }
        kafka_replicas: { get_input: kafka_replicas }
        kafka_enable_public_connections: { get_input: kafka_enable_public_connections }
        kafka_public_port: { get_input: kafka_public_port }
        kafka_admin_user: { get_input: kafka_admin_user }
        kafka_admin_password: { get_input: kafka_admin_password }
        kafka_volume_longhorn_admin_user: { get_input: kafka_volume_longhorn_admin_user }
        kafka_volume_longhorn_admin_password: { get_input: kafka_volume_longhorn_admin_password }
        kafka_kraft_enabled: { get_input: kafka_kraft_enabled }
        kafka_kraft_replicas: { get_input: kafka_kraft_replicas }
        kafka_kraft_enable_public_connections: { get_input: kafka_kraft_enable_public_connections }
        kafka_kraft_public_port: { get_input: kafka_kraft_public_port }        
        zookeeper_enabled: { get_input: zookeeper_enabled }
        zookeeper_replicas: { get_input: zookeeper_replicas }
        zookeeper_enable_public_connections: { get_input: zookeeper_enable_public_connections }
        zookeeper_public_port: { get_input: zookeeper_public_port }
        kafka_ui_enabled: { get_input: kafka_ui_enabled }
        kafka_ui_admin_user: { get_input: kafka_ui_admin_user }
        kafka_ui_admin_password: { get_input: kafka_ui_admin_password }
        kube_type_of_node: front
        kube_front_end_ip: { get_attribute: [ k8s_master_server, private_address, 0 ] }
        domain: myip.cloud.infn.it
        cert_manager_type: { get_input: certificate_type }
      requirements:
        - host: k8s_master_server
        - dependency: k8s_longhorn

  outputs:
    k8s_endpoint:
      value: { concat: [ 'https://dashboard.', get_attribute: [ k8s_master_server, public_address, 0 ], '.myip.cloud.infn.it' ] }
    grafana_endpoint:
      value: { concat: [ 'https://grafana.', get_attribute: [ k8s_master_server, public_address, 0 ], '.myip.cloud.infn.it' ] }
    grafana_username:
      value: admin
    k8s_master_ip:
      value: { get_attribute: [ k8s_master_server, public_address, 0 ] }
    k8s_node_ip:
      value: { get_attribute: [ k8s_node_server, private_address ] }
    k8s_node_with_gpu_ip:
      value: { get_attribute: [ k8s_node_server_with_gpu, private_address ] }
    os_users:
      value: { get_property: [ k8s_master_server, os_users, 0 ] }  
