tosca_definitions_version: tosca_simple_yaml_1_0

imports:
  - indigo_custom_types: https://baltig.infn.it/infn-cloud/tosca-types/raw/v2.9.0/tosca_types/applications/htcondor_types.yaml

description: Deploy a complete HTCondor cluster

metadata:
  display_name: HTCondor cluster
  template_type: "kubernetes"

topology_template:

  inputs:

    certificate_type:
      required: no
      type: string
      default: letsencrypt-prod
      constraints:
        - valid_values: [ 'letsencrypt-prod', 'letsencrypt-staging', 'self-signed' ]

    admin_token:
      description: token for accessing K8s dashboard and Grafana admin password
      type: string
      required: yes

    cluster_secret:
      description: token for HTCondor daemon-daemon authN
      type: string
      required: yes

    number_of_masters:
      description: number of VMs for K8s master
      type: integer
      required: yes
      constraints:
        - valid_values: [ 1 ]

    num_cpus_master:
      description: number of CPU for K8s master VM
      type: integer
      default: 4

    mem_size_master:
      description: memory size for K8s master VM
      type: string
      default: "8 GB"

    number_of_slaves:
      description: number of K8s node VMs
      type: integer
      default: 3

    num_cpus_slave:
      description: number of CPUs for K8s node VM
      type: integer
      default: 4

    mem_size_slave:
      description: memory size for K8s node VM
      type: string
      default: "8 GB"

    wn_image:
      description: HTCondor WN image name
      type: string
      default: "htcondor/execute"

    wn_tag:
      description: HTCondor WN tag name
      type: string
      default: ""
      constraints:
        - valid_values: ["", "8.9.9-el7", "9.0-el7"]

    iam_server:
      description: IAM server name for HTCondor authN
      type: string
      default: "iam.cloud.infn.it"

    users:
      type: list
      description: list of users to create on the VM
      entry_schema:
        type: tosca.datatypes.indigo.User
      default: []
      required: false


  node_templates:

    pub_network:
      type: tosca.nodes.network.Network
      properties:
        network_type: public

    server_pub_port:
      type: tosca.nodes.network.Port
      properties:
        order: 1
      requirements:
        - binding: k8s_master_server
        - link: pub_network

    priv_network:
      type: tosca.nodes.network.Network
      properties:
        network_type: private

    server_priv_port:
      type: tosca.nodes.network.Port
      properties:
        order: 0
      requirements:
        - binding: k8s_master_server
        - link: priv_network

    slave_priv_port:
      type: tosca.nodes.network.Port
      properties:
        order: 0
      requirements:
        - binding: k8s_slave_server
        - link: priv_network

    longhorn:
      type: tosca.nodes.DODAS.HelmInstall
      properties:
        repos:
          - { name: longhorn, url: "https://charts.longhorn.io" }
        name: longhorn
        chart: "longhorn/longhorn"
        inline_options: "--version 1.5.1 -n longhorn-system --create-namespace"
        helm_version: v3
        values_file: |
          persistence:
            defaultClassReplicaCount: 1
      requirements:
        - host: k8s_master_server
        - dependency: k8s_master

    helm_install:
      type: tosca.nodes.DODAS.HelmInstall.HTCondor
      properties:
        name: "hub"
        chart: "dodas/htcondor"
        repos:
        - { name: dodas, url: "https://dodas-ts.github.io/helm_charts" }
        condor_host: { get_attribute: [ k8s_master_server , public_address, 0 ] }
        wn_image: { get_input: wn_image }
        wn_tag: { get_input: wn_tag }
        iam_server: {get_input: iam_server }
        cluster_secret: {get_input: cluster_secret }
        helm_version: v3
        inline_options: "--version 2.1.16"
        values_file: |
          # Default values for htcondor.
          # This is a YAML-formatted file.
          # Declare variables to be passed into your templates.

          cluster:
            secret: {{ cluster_secret }}

          schedd:
            enabled: true
            mapfile: |
              SCITOKENS https:\\/\\/{{ iam_server }}\\/,(.*) \\1@users.htcondor.org
              PASSWORD (*.) condor
              GSI (.*) anonymous
            extraconfig: ''
            hostname: {{ condor_host }}.myip.cloud.infn.it
            service:
              type: NodePort
              nodePort: 31618
              targetPort: 31618
            image:
              name: {{ schedd_image }}
              tag:  '{{ wn_tag }}'
              pullPolicy: IfNotPresent
            persistence:
              spooldir:
                enabled: true
                storageClass: longhorn
                size: 10Gi
            requests:
              memory: '500M'
              cpu: '100m'

          master:
            enabled: true
            publicIP: {{ condor_host }}
            extraconfig: ''
            hostname: {{ condor_host }}.myip.cloud.infn.it
            service:
              type: NodePort
              nodePort: 30618
              targetPort: 30618
            image:
              name: {{ cm_image }}
              tag:  '{{ wn_tag }}'
              pullPolicy: IfNotPresent
            requests:
              memory: '500M'
              cpu: '100m'

          wn:
            enabled: true
            affinity: |
              podAntiAffinity:
                requiredDuringSchedulingIgnoredDuringExecution:
                - labelSelector:
                    matchExpressions:
                    - key: app.kubernetes.io/name
                      operator: In
                      values:
                      - schedd
                      - master
                  topologyKey: kubernetes.io/hostname
            replicas: 1
            image:
              name:  {{ wn_image }}
              tag:  '{{ wn_tag }}'
              pullPolicy: IfNotPresent
            # Condor slot type
            slotType: cpus=1, mem=2000
            requests:
              memory: '1500M'
              cpu: 1
            # Define you own persistent volume to mount
            persistentVolume:
              pv:
                name: ''
                spec: ''
              pvc:
                name: ''
                mountPath: ''
                spec: ''

          htcClient:
            enabled: false
            image:
              name: htcondor/execute
              pullPolicy: IfNotPresent
              tag: '8.9.9-el7'

          prometheusExporter:
            enabled: false
            image:
              name: ttedesch/htcondor-exporter
              pullPolicy: IfNotPresent
              tag: 'v2'

          autoscaling:
            enabled: false
            minReplicas: 1
            maxReplicas: 10
            targetMetric: condor_slot_activity_busy
            targetMetricValue: 0.75

          # Enable Squid server
          squid:
            enabled: false
            image: dodasts/squid
            tag: v1.1.0-dodas
            pullPolicy: IfNotPresent

            # Service Port
            port: 31128

          # CVMFS mount on slave: configuration
          cvmfs:
            enabled: false
            image: dodasts/cvmfs
            tag: latest
            pullPolicy: IfNotPresent

            # List of repos to be mounted
            repoList: cms.cern.ch  grid.cern.ch  oasis.cern.ch  singularity.opensciencegrid.org

            privKey: []
            #  - name: spiga
            #    path: spiga.local.repo
            #    filename: spiga.local.repo.pub
            #    content: |
            #      test

            # default.local file content
            defaultLocalConfig: []
            #  - file: spiga.local.repo.conf
            #    content: |
            #      spiga.local.repo.conf: |-
            #        property.1=value-1
            #        property.2=value-2

          ttsCache:
            enabled: false
            image: dodasts/tts-cache
            tag: v0.1.3-k8s-12
            iamToken:
            iamClientId:
            iamClientSecret:

            pullPolicy: IfNotPresent
            replicas: 1

            # TO BE IMPLEMENTED: SCIM read client for automatic condor user mapping
            iamScimClientId:
            iamScimSecret:
            iamMapGroup: ALL
      requirements:
        - host: k8s_master_server
        - dependency: longhorn

    k8s_master:
      type: tosca.nodes.DODAS.FrontEnd.Kubernetes
      properties:
        kube_version: 1.28.3
        admin_token: { get_input: admin_token }
        cert_manager_type: { get_input: certificate_type }
      requirements:
        - host: k8s_master_server

    k8s_slave:
      type: tosca.nodes.DODAS.WorkerNode.Kubernetes
      properties:
        kube_version: 1.28.3
        front_end_ip: { get_attribute: [ k8s_master_server, private_address, 0 ] }
      requirements:
        - host: k8s_slave_server

    k8s_master_server:
      type: tosca.nodes.indigo.Compute
      properties:
        os_users: { get_input: users }
        tags:
          ENDPOINTS: "dashboard#api-kubernetes#grafana"
      capabilities:
        endpoint:
          properties:
            ports:
              http:
                protocol: tcp
                source: 80
              https:
                protocol: tcp
                source: 443
              cm:
                protocol: tcp
                source: 30618
              schedd:
                protocol: tcp
                source: 31618
        scalable:
          properties:
            count: { get_input: number_of_masters }
        host:
          properties:
            num_cpus: { get_input: num_cpus_master }
            mem_size: { get_input: mem_size_master }
        os:
          properties:
            distribution: ubuntu
            version: 20.04

    k8s_slave_server:
      type: tosca.nodes.indigo.Compute
      properties:
        os_users: { get_input: users }
      capabilities:
        scalable:
          properties:
            count: { get_input: number_of_slaves }
        host:
          properties:
            num_cpus: { get_input: num_cpus_slave }
            mem_size: { get_input: mem_size_slave }
        os:
          properties:
            distribution: ubuntu
            version: 20.04


  outputs:
    k8s_dashboard:
      value: { concat: [ 'https://dashboard.', get_attribute: [ k8s_master_server, public_address, 0 ], '.myip.cloud.infn.it' ] }
    k8s_api:
      value:  { concat: [ 'https://api-kubernetes.', get_attribute: [ k8s_master_server, public_address, 0 ], '.myip.cloud.infn.it/' ] }
    _condor_COLLECTOR_HOST:
      value: { concat: [ get_attribute: [ k8s_master_server, public_address, 0 ], '.myip.cloud.infn.it:30618' ] }
    _condor_SCHEDD_NAME:
      value: { concat: [ get_attribute: [ k8s_master_server, public_address, 0 ], '.myip.cloud.infn.it' ] }
    _condor_SCHEDD_HOST:
      value: { concat: [ get_attribute: [ k8s_master_server, public_address, 0 ], '.myip.cloud.infn.it' ] }
    k8s_master_ip:
      value: { get_attribute: [ k8s_master_server, public_address, 0 ] }
    k8s_master_node_creds:
      value: { get_attribute: [ k8s_master_server, endpoint, credential, 0 ] }
    k8s_wn_ip:
      value: { get_attribute: [ k8s_slave_server, private_address ] }
    k8s_wn_node_creds:
      value: { get_attribute: [ k8s_slave_server, endpoint, credential ] }
    grafana_endpoint:
      value: { concat: [ 'https://grafana.', get_attribute: [ k8s_master_server, public_address, 0 ], '.myip.cloud.infn.it' ] }
    os_users:
      value: { get_property: [ k8s_master_server, os_users, 0 ] }
