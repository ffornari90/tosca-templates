tosca_definitions_version: tosca_simple_yaml_1_0

imports:
  - indigo_custom_types: https://paas.cloud.infn.it/public/tosca/custom_types.yaml

description: Deploy a pool of virtual machines configuring Kubernetes for the execution of a remote accessible HTCondor cluster. WorkerNodes mount a arbitrary list of CVMFS repositories as well as a NFS mountpoint for read and write data. 

metadata:
  display_name: Data processing Cluster - HTCondor+CVMFS+NFS
  icon: https://paas.cloud.infn.it/public/images/HTCondor.png
  allowed_groups: "developers,orchestrator-admin"

topology_template:

  inputs:

    number_of_masters:
      type: integer
      default: 1

    num_cpus_master: 
      type: integer
      default: 2

    mem_size_master:
      type: string
      default: "4 GB"

    number_of_slaves:
      type: integer
      default: 3 

    num_cpus_slave: 
      type: integer
      default: 2

    mem_size_slave:
      type: string
      default: "4 GB"

#NFS
    nfs_path:
      type: string
      default: "/data/my-storage-area"

    nfs_master_ip:
      type: string
      default: "172.30.136.4"

    htcondor_docker_image:
      type: string
      default: "dodasts/htcondor"

    proxycache_docker_image:
      type: string
      default: "dodasts/ttscache"
 
    iam_token:
      type: string
      default: "eyJraWQiOiJyc2ExIiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwOTMxYjI2ZS04OWY2LTQxMTgtYTVjNC1kZDdmOWU5ZWM4NWEiLCJpc3MiOiJodHRwczpcL1wvZG9kYXMtaWFtLmNsb3VkLmNuYWYuaW5mbi5pdFwvIiwiZXhwIjoxNTc5NTQ0MTcyLCJpYXQiOjE1Nzk1Mjk3NzIsImp0aSI6Ijg3ZGVlNzUzLWIwOGUtNGQyZC1iNTFkLTg0ODdiN2UxYWI5ZSJ9.uED4XZ9uZAlRpIh3TlLZsSo4FaDA36_2B95oiRLj9RvMJE20dXJq4jVy_ZH625sJr_wH3hXALyQzv9P_vO6_S0Nyi_P5w8oq4zK3UNCD2u6o2OgX5Tc7wTZlKIvBJgcKLRqXebyPvrvs5QRmtCOqf0pxjSxjrUl4R9zqIx_Fo-Q"

  node_templates:

    helm_htcondor:
      type: tosca.nodes.DODAS.HelmInstall.HTCondor
      properties:
        labels:
          - "vnode-0.localdomain condor=ccb" 
          - "vnode-2.localdomain condor=schedd" 
        repos:
          - { name: dodas, url: "https://dodas-ts.github.io/helm_charts" }
        name: "htcondor"
        chart: "dodas/htcondor"
        kubeconfig_path: /etc/kubernetes/admin.conf
        values_file: "condorHost: {{ condor_host }}\nccbHost: {{ ccb_address }}\nproxyCacheHost: {{ k8s_master_ip }}\nttsCache:\n  image: {{ proxycache_docker_image }}\n  tag: v1.1.4-dodas       \n  iamToken: {{ iam_token }}\n  iamClientId: 99f7152a-0550-4be6-8c55-8f27dcbe67e0\
      \ \n  iamClientSecret: AIEx7S3vAiIKhinEPndgnEw61GHxMC0k-_4wiVXpLOhLokr97-wNK5PEgMZOpqfO6UkKVARyBb2lQ8i4Qdv_38o\nhtcSchedd:\n  image: {{ htcondor_docker_image }}\n  tag: v1.0.0.rc1\n  networkInterface: {{ schedd_netinterface }}\n  persistence:\n    storageClass:\
      \ local-path\nhtcMaster:\n  image: {{ htcondor_docker_image }}\n  tag: v1.0.0.rc1\n  networkInterface: {{ condor_host }}\nhtcWn:\n  image: {{ htcondor_docker_image }}\n  tag: v1.0.0.rc1\n  #nodeSelector: '' \nnfs:\n  enabled: true\n  size: 2Gi\n  claimSize:\
      \ 950Mi\n  # Put here the nfs master address\n  server: {{ nfs_master_ip }}\n  path: {{ nfs_path }}\n  persistence:\n    claimSize: 950Mi\ncvmfs:\n  enabled: true \n  image: dodasts/cvmfs\n  tag: k8s\n  pullPolicy: IfNotPresent\n  replicas: 1\n\n  # List\
      \ of repos to be mounted\n  repoList: spiga.local.repo \n\n  privKey: |\n    spiga.local.repo.pub: |-\n      -----BEGIN PUBLIC KEY-----\n      MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAo9D2O8wNFcAOJOie+l5E\n      xMlAAjiXG2GNqpbe1N/A0tOspGxDMpB0EJn8WneRYbnrKyItVPWyuQo5ol/IonBb\n\
      \      RbzPGHhXTPUyUZQgUpJ5xFEqIA2/lr5Wt82b9MluylphCpr9ZNOsskLYIINu+4fr\n      q21vY7IMuAc4nK0cp59AVam4q3YXAKs6HV3qcI1mPWCHkW9Zo74gRBQkUpVoUpSV\n      iQxKCRoGYMyC9Q7KiwOWk4LEtuMITgg1EcxCxRB2Qx0zsflccYAiJ2l+r5IE9TUy\n      DYeRsTfijI3RmxyhWrSgyXkNbSiH9ME8grbACDPRpWdzHpxThWlUNrwfOXkF2a3e\n\
      \      MQIDAQAB\n      -----END PUBLIC KEY-----\n  defaultLocalConfig: |\n    spiga.local.repo.conf: |\n      CVMFS_SERVER_URL=http://172.30.136.3/cvmfs/spiga.local.repo\n      CVMFS_PUBLIC_KEY=/etc/cvmfs/keys/spiga.local.repo.pub\n      CVMFS_HTTP_PROXY=DIRECT\n"
        condor_host: { get_attribute: [ k8s_server_ccb , public_address, 0 ] }
        ccb_address: { get_attribute: [ k8s_server_ccb , public_address, 0 ] }
        schedd_netinterface: { get_attribute: [ k8s_server_schedd , private_address, 0 ] }
        k8s_master_ip: { get_attribute: [ k8s_master_server , private_address, 0 ] }
        htcondor_docker_image:  { get_input: htcondor_docker_image }
        proxycache_docker_image:  { get_input: proxycache_docker_image }
        iam_token:  { get_input: iam_token }
        nfs_master_ip: { get_input: nfs_master_ip }
        nfs_path: { get_input: nfs_path }   
      requirements:
        - host: k8s_master_server
        - dependency: k8s_slave_ccb

    k8s_master:
      type: tosca.nodes.DODAS.FrontEnd.Kubernetes
      properties:
        admin_token: testme
      requirements:
        - host: k8s_master_server

    k8s_slave_ccb:
      type: tosca.nodes.DODAS.WorkerNode.Kubernetes 
      properties:
        front_end_ip: { get_attribute: [ k8s_master_server, private_address, 0 ] }
        #kubelet_extra_args: "condor=ccb"
      requirements:
        - host: k8s_server_ccb

    k8s_slave_schedd:
      type: tosca.nodes.DODAS.WorkerNode.Kubernetes 
      properties:
        front_end_ip: { get_attribute: [ k8s_master_server, private_address, 0 ] }
        #kubelet_extra_args: "condor=schedd"
      requirements:
        - host: k8s_server_schedd

    k8s_slave_wn:
      type: tosca.nodes.DODAS.WorkerNode.Kubernetes 
      properties:
        front_end_ip: { get_attribute: [ k8s_master_server, private_address, 0 ] }
      requirements:
        - host: k8s_server_wn

    k8s_master_server:
      type: tosca.nodes.indigo.Compute
      capabilities:
        endpoint:
          properties:
            # network_name: infn-farm.PUBLIC
            network_name: PUBLIC
            ports:
              kube_port:
                protocol: tcp
                source: 30443
        scalable:
          properties:
            count: { get_input: number_of_masters }
        host:
          properties:
            # instance_type:  m1.medium
            num_cpus: { get_input: num_cpus_master }
            mem_size: { get_input: mem_size_master } 
        os:
          properties:
            image: "RECAS Ubuntu 16.04 LTS [Daily Build 20181114]"

    k8s_server_ccb:
      type: tosca.nodes.indigo.Compute
      capabilities:
        endpoint:
          properties:
            network_name: PUBLIC
            ports:
              collector:
                protocol: tcp
                source: 9618
        scalable:
          properties:
            count: 1
        host:
          properties:
            #instance_type:  m1.medium
            num_cpus: { get_input: num_cpus_slave }
            mem_size: { get_input: mem_size_slave } 
        os:
          properties:
            # image: "ost://openstack.fisica.unipg.it/d9a41aed-3ebf-42f9-992e-ef0078d3de95"
            image: "RECAS Ubuntu 16.04 LTS [Daily Build 20181114]"

    k8s_server_schedd:
      type: tosca.nodes.indigo.Compute
      capabilities:
        endpoint:
          properties:
            network_name: PUBLIC
            ports:
              schedd:
                protocol: tcp
                source: 9618
              registration:
                protocol: tcp
                source: 48080
        scalable:
          properties:
            count: 1
        host:
          properties:
            #instance_type:  m1.medium
            num_cpus: { get_input: num_cpus_slave }
            mem_size: { get_input: mem_size_slave } 
        os:
          properties:
            # image: "ost://openstack.fisica.unipg.it/d9a41aed-3ebf-42f9-992e-ef0078d3de95"
            image: "RECAS Ubuntu 16.04 LTS [Daily Build 20181114]"

    k8s_server_wn:
      type: tosca.nodes.indigo.Compute
      capabilities:
        endpoint:
          properties:
            #network_name: test-net.PRIVATE
            network_name: PRIVATE
        scalable:
          properties:
            count: { get_input: number_of_slaves }
        host:
          properties:
            #instance_type:  m1.medium
            num_cpus: { get_input: num_cpus_slave }
            mem_size: { get_input: mem_size_slave } 
        os:
          properties:
            # image: "ost://openstack.fisica.unipg.it/d9a41aed-3ebf-42f9-992e-ef0078d3de95"
            image: "RECAS Ubuntu 16.04 LTS [Daily Build 20181114]"

  outputs:
    k8s_endpoint:
      value: { concat: [ 'https://', get_attribute: [ k8s_master_server, public_address, 0 ], ':30443' ] }
    k8s_master_ip:
      value: { get_attribute: [ k8s_master_server, public_address, 0 ] }
    k8s_master_node_creds:
      value: { get_attribute: [ k8s_master_server, endpoint, credential, 0 ] }
    schedd_ip:
      value: { get_attribute: [ k8s_server_schedd, public_address, 0 ] }
    schedd_node_creds:
      value: { get_attribute: [ k8s_server_schedd, endpoint, credential, 0 ] }
    k8s_wn_ip:
      value: { get_attribute: [ k8s_server_wn, private_address, 0 ] }
    k8s_wn_node_creds:
      value: { get_attribute: [ k8s_server_wn, endpoint, credential, 0 ] }
    label:
      value: "HTCondor cluster"
