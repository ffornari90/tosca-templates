tosca_definitions_version: tosca_simple_yaml_1_0

imports:
  - indigo_custom_types: https://baltig.infn.it/infn-cloud/tosca-types/raw/master/custom_types.yaml

description: Run Jupyter on a single VM enabling Notebooks persistence in Amazon S3

metadata:
  display_name: Jupyter with persistence for Notebooks
  icon: https://paas.cloud.infn.it/public/images/jupyter_s3.png
  allowed_groups: "beta-testers,developers,orchestrator-admin"

topology_template:

  inputs:

    num_cpus:
      type: integer
      description: "Number of VM vCPUs [int]"
      default: 4
    mem_size:
      type: string
      description: "VM memory size [str]"
      default: "8 GB"
    jupyter_token:
      type: string
      description: "Token for Jupyter login [str]"
      required: yes
    persistence:
      type: string
      description: "Choose the  s3 mount mode: s3-goofys (suggested) or s3-contents"
      required: yes
      constraints:
        - valid_values: [ "s3-goofys", "s3-contents" ]
    s3_access_id:
      type: string
      description: "S3 access user id [str]"
      required: yes
    s3_access_key:
      type: string
      description: "S3 access key [str]"
      required: yes
    s3_bucket:
      type: string
      required: yes
    s3_endpoint:
      type: string
      description: "S3 endpoint (http://endpoint:9000)"
      required: yes

  node_templates:

    jupyter_install:
      type: tosca.nodes.DODAS.JupyterVM
      properties:
        vm_user: cloudadm 
        jupyter_port: 8888 
        jupyter_token: { get_input: jupyter_token }
        persistence: { get_input: persistence }
        s3_access_id: { get_input: s3_access_id }
        s3_access_key: { get_input: s3_access_key }
        s3_bucket: { get_input: s3_bucket }
        s3_endpoint: { get_input: s3_endpoint }
        s3_mount_prefix: "" 
      requirements:
        - host: vm_server

    vm_server:
      type: tosca.nodes.indigo.Compute
      capabilities:
        endpoint:
          properties:
            network_name: PUBLIC
            ports:
              jupyter:
                protocol: tcp
                source: 8888
        scalable:
          properties:
            count: 1
        host:
          properties:
            #instance_type:  m1.medium
            num_cpus: { get_input: num_cpus }
            mem_size: { get_input: mem_size }
        os:
          properties:
            distribution: ubuntu
            version: 18.04

  outputs:
    label:
      value: Jupyter
    jupyter_endpoint:
      value: { concat: [ 'https://', get_attribute: [ vm_server, public_address, 0 ], ':8888' ]  }
